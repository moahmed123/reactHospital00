{
  "_from": "react-redux-fetch",
  "_id": "react-redux-fetch@0.11.3",
  "_inBundle": false,
  "_integrity": "sha512-Fg2NfvD0pP8r+jo5pdYmHSn5Z5tofCCXNkeRDiFxBUSlvxM8m3BIovPI4khVYcQ4BW/1mLaqqDRUx/vvUDwdqg==",
  "_location": "/react-redux-fetch",
  "_phantomChildren": {
    "hoist-non-react-statics": "2.3.1",
    "invariant": "2.2.2",
    "lodash": "4.17.4",
    "lodash-es": "4.17.5",
    "loose-envify": "1.3.1",
    "prop-types": "15.6.0"
  },
  "_requested": {
    "escapedName": "react-redux-fetch",
    "fetchSpec": "latest",
    "name": "react-redux-fetch",
    "raw": "react-redux-fetch",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-redux-fetch/-/react-redux-fetch-0.11.3.tgz",
  "_shasum": "4ebf8a22ea9ed8d1316575d79f5dbb9118ff772f",
  "_spec": "react-redux-fetch",
  "_where": "c:\\Users\\Memosoft\\Desktop\\bestoffer",
  "author": {
    "name": "David Van Gompel"
  },
  "bugs": {
    "url": "https://github.com/hirviid/react-redux-fetch/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "lodash": "4.17.4",
    "react": "16.2.0",
    "react-redux": "5.0.6",
    "redux": "3.7.2",
    "seamless-immutable": "^7.1.2"
  },
  "deprecated": false,
  "description": "A declarative and customizable way to fetch data for React components and manage that data in the Redux state",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.24.1",
    "babel-eslint": "^7.2.2",
    "babel-loader": "^7.0.0",
    "babel-plugin-transform-decorators-legacy": "1.3.4",
    "babel-plugin-transform-flow-strip-types": "^6.22.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-es2015-loose": "^8.0.0",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "babel-register": "^6.24.1",
    "chai": "3.5.0",
    "eslint": "^3.19.0",
    "eslint-config-airbnb": "^14.1.0",
    "eslint-plugin-flowtype": "^2.32.1",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.10.3",
    "flow-bin": "^0.54.1",
    "flow-copy-source": "^1.1.0",
    "mocha": "^3.2.0",
    "rimraf": "^2.6.1"
  },
  "files": [
    "lib",
    "react-redux-fetch.d.ts"
  ],
  "homepage": "https://github.com/hirviid/react-redux-fetch#readme",
  "keywords": [
    "ajax",
    "crud",
    "data",
    "fetch",
    "react",
    "reactjs",
    "redux"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "react-redux-fetch",
  "optionalDependencies": {},
  "peerDependencies": {
    "lodash": "^4.17.4",
    "react": "^0.14.0 || ^15.0.0-0 || ^16.0.0",
    "react-redux": "^4.0.0 || ^5.0.0",
    "redux": "^2.0.0 || ^3.0.0"
  },
  "readme": "React Redux Fetch\n=================\n\nA declarative and customizable way to fetch data for React components and manage that data in the Redux state.\n\n[![build status](https://img.shields.io/travis/hirviid/react-redux-fetch/master.svg?style=flat-square)](https://travis-ci.org/hirviid/react-redux-fetch) [![npm version](https://img.shields.io/npm/v/react-redux-fetch.svg?style=flat-square)](https://www.npmjs.com/package/react-redux-fetch)\n\n## Table of contents\n* [Goal](#goal)\n* [Motivation](#motivation)\n* [Installation](#installation)\n* [Setup](#setup)\n* [Basic example](#basic-example)\n* [How does it work?](#how-does-it-work)\n* [API](#api)\n    - [Connect](#connect)\n    - [Container](#container)\n    - [buildActionsFromMappings](#buildactionsfrommappings)\n* [Examples](#examples)\n    - [POST](#post)\n    - [PUT](#put)\n    - [DELETE](#delete)\n* [Code snippets](./docs/README.md)\n* [Versioning](#versioning)\n\n## Goal\nThe goal of this library is to minimize boilerplate code  of crud operations in react/redux applications.\n\n## Motivation\nRedux provides a clean interface for handling data across your application, but integrating with a web service can become a quite cumbersome, repetitive task. [React-refetch by Heroku](https://github.com/heroku/react-refetch) provides a good alternative, but doesn't keep your fetched data in the application state, which makes it more difficult to debug, handle side effects (e.g. with redux-saga) and integrate with your redux actions. This module is strongly inspired by react-refetch; it exposes a `connect()` decorator to keep your components stateless. This function lets you map props to URLs. React-redux-fetch takes these mappings and creates functions which dispatch actions and passes them as props to your component. The response is also passed as a prop to your component with additional pending, fulfilled and rejected flags, just like react-refetch.\n\n## Installation\n\n```\nnpm install --save react-redux-fetch\n```\n\n## Setup\n\n1. Connect the react-redux-fetch middleware to the Store using `applyMiddleware`:\n    ```jsx\n    // ...\n    import {createStore, applyMiddleware} from 'redux'\n    import {middleware as fetchMiddleware} from 'react-redux-fetch'\n\n    // ...\n\n    const store = createStore(\n        reducer,\n        applyMiddleware(fetchMiddleware)\n    )\n\n    // rest unchanged\n    ```\n\n2. Mount react-redux-fetch reducer to the state at `repository`:\n    ```jsx\n    import {combineReducers} from 'redux';\n    import {reducer as fetchReducer} from 'react-redux-fetch';\n\n    const rootReducer = combineReducers({\n        // ... other reducers\n        repository: fetchReducer\n    });\n\n    export default rootReducer;\n    ```\n\n## Basic example\n```jsx\nimport React, {PropTypes} from 'react';\nimport connect from 'react-redux-fetch';\n\nclass PokemonList extends React.Component {\n    static propTypes = {\n        // injected by react-redux-fetch\n        /**\n         * @var {Function} dispatchAllPokemonGet call this function to start fetching all Pokémon\n         */\n        dispatchAllPokemonGet: PropTypes.func.isRequired,\n        /**\n         * @var {Object} allPokemonFetch contains the result of the request + promise state (pending, fulfilled, rejected)\n         */\n        allPokemonFetch: PropTypes.object\n    };\n\n    componentWillMount() {\n        this.props.dispatchAllPokemonGet();\n    }\n\n    render() {\n        const {allPokemonFetch} = this.props;\n\n        if (allPokemonFetch.rejected) {\n            return <div>Oops... Could not fetch Pokémon!</div>\n        }\n\n        if (allPokemonFetch.fulfilled) {\n            return <ul>\n                {allPokemonFetch.value.results.map(pokemon => (\n                    <li key={pokemon.name}>{pokemon.name}</li>\n                ))}\n            </ul>\n        }\n\n        return <div>Loading...</div>;\n    }\n}\n\n// connect(): Declarative way to define the resource needed for this component\nexport default connect([{\n    resource: 'allPokemon',\n    method: 'get', // You can omit this, this is the default \n    request: {\n        url: 'http://pokeapi.co/api/v2/pokemon/'\n    }\n}])(PokemonList);\n```\n\n## How does it work?\nEvery entry in the config array passed to `connect()` is mapped to 2 properties, a function to make the actual request and an object containing the response.\n\nThe function name consists of 3 parts:\n - dispatch:  to indicate that by calling this function a redux action is dispatched\n - [resourceName]: the name of the resource declared in the config\n - [method]: The method of the request (Get/Delete/Post/Put)\n\nThe response object, with name: [resourceName] + 'Fetch', consists of:\n - pending, fulfilled, rejected: Promise flags\n - value: The actual response body\n - meta: The actual response object\n\nWhen calling `this.props.dispatchAllPokemonGet();`, react-redux-fetch dispatches the action `react-redux-fetch/GET_REQUEST`:\n\n<img src=\"https://cloud.githubusercontent.com/assets/6641475/17690441/fa6086b2-638e-11e6-9588-15fa41e2fa2b.png\" alt=\"GET_REQUEST/Action\" width=\"500\" />\n\nThe action creates a new state tree `allPokemon`, inside the `repository` state tree:\n\n<img src=\"https://cloud.githubusercontent.com/assets/6641475/17690442/fa61e926-638e-11e6-94d4-2a16369ba8ee.png\" alt=\"GET_REQUEST/State\" width=\"500\" />\n\nThe react-redux-fetch middleware takes this action and builds the request with [Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API).\nThis part of the state is passed as a prop to the PokemonList component:\n\n<img src=\"https://cloud.githubusercontent.com/assets/6641475/17713820/264f9402-63fd-11e6-88a8-9ac2e01b2b5e.png\" alt=\"GET_REQUEST/PENDING\" width=\"300\" />\n\nWhen the request fulfills (i.e. receiving a status code between 200 and 300), react-redux-fetch dispatches the action `react-redux-fetch/GET_FULFIL`:\n\n<img src=\"https://cloud.githubusercontent.com/assets/6641475/17690440/fa6070be-638e-11e6-9da8-90ee1b975373.png\" alt=\"GET_REQUEST/Action\" width=\"500\" />\n\nWith updated state tree:\n\n<img src=\"https://cloud.githubusercontent.com/assets/6641475/17690443/fa645a08-638e-11e6-8b97-8e0a5ff2e657.png\" alt=\"GET_FULFIL/Action\" width=\"500\" />\n\nThis part of the state is passed as a prop to the PokemonList component:\n\n<img src=\"https://cloud.githubusercontent.com/assets/6641475/17713773/e0d32628-63fc-11e6-878a-18bbcf64240d.png\" alt=\"PROPS/FULFILLED\" width=\"300\" />\n\n## API\n\n### connect()\nA higher order component to enhance your component with the react-redux-fetch functionality.\n\nAccepts an array:\n```jsx\nconnect([{\n   // ... configuration, see below\n}])(yourComponent);\n```\n\nOr a function returning an array. This function receives the props and context, which can then be used in your configuration to dynamically build your urls.\n```jsx\nconnect((props, context) => [{\n   // ... configuration, see below\n}])(yourComponent);\n```\n\nThe returned array should be an array of objects, with the following properties:\n- `resource`: **Object|String, required**. When used as a string, this is the same as `resource: { name: 'myResource' }`.\n    * `name`: **String, required**. A name for your resource, this name will be used as a key in the state tree. If no `action` is defined in `resource`, the `name` is used in the dispatch prop, e.g.: `name: 'myResource'` => `dispatchMyResourceGet`.\n    * `action`: **String, optional**. A name to use in the dispatch function that's created and passed as a prop. (e.g. `action: 'myAction'` => `dispatchMyActionGet`).\n- `method`: **String, optional**, default: 'get'. The request method that will be used for the request. One of 'get', 'post', 'put', 'delete'. Can be extended by adding new types to the registry (see below).\n- `request`: **Object|Function, required**. Use a function if you want to pass dynamic data to the request config (e.g. body data).\n    * `url`: **String, required**.  The URL to make the request to.\n    * `body`: **Object, optional**. The object that will be sent as JSON in the body of the request.\n    * `headers`: **Object|Function<header>, optional**. Use this to set the headers, for this request only. Use `container.registerRequestHeader()` to set headers for every request.\n    * `meta`: **Object, optional**. Everything passed to 'meta' will be passed to every part in the react-redux-fetch flow.\n    * `comparison`: **Any, optional**. If provided, a new request is not made if the `comparison` value between dispatch calls is the same.\n    * `force`: **boolean, optional**. If `true`, overrules the `comparison` property.\n\n\n### container\n\n```js\nimport { container } from 'react-redux-fetch';\n```\n\nThe container provides a single entry point into customizing the different parts of react-redux-fetch.\nFor now, the following customizations are possible, this will be extended in the future:\n\n- **requestMethods**\n\n    Out-of-the-box, react-redux-refetch provides implementations for `get`, `post`, `put` and `delete` requests.\n    A new request method, e.g. `patch`, can be added like this:\n    ```js\n    container.registerRequestMethod('patch', {\n      method: 'patch', // The request method\n      middleware: fetchRequest, // The middleware to handle the actual fetching. 'fetchRequest' from 'react-redux-fetch' is a sensible default for any request method.\n      reducer: patchReducer\n    });\n    ```\n\n    An existing request method definition can be altered like this:\n    ```js\n    // Replace middleware for POST requests with a mock\n    container.changeRequestMethodConfig('post', 'middleware', mockFetchMiddleware);\n    ```\n\n- **requestHeaders**\n\n    The default request headers are `'Accept': 'application/json'` and `'Content-Type': 'application/json'`. You can add request headers:\n    ```js\n    container.registerRequestHeader('authorization', 'Bearer some.jwt.token');\n    ```\n    Or replace the request headers:\n    ```js\n    container.replaceRequestHeaders({ 'Content-Type', 'application/xml' });\n    ```\n\n- **reducers**\n\n    Additional reducers can be registered to work on a subset of the fetch state, without having to overwrite all reducers defined in requestMethods definition.\n    For example, there is no out-of-the-box way of clearing state data. If you want to clear e.g. all todo items from a todo list, you can register a reducer to work on the 'todos' state.\n    ```js\n    container.registerReducer('todos', todosReducer);\n    ```\n    The todos state slice is passed to the reducer, which can return a new state when your custom redux action is dispatched:\n    ```js\n    function todosReducer(state, action) {\n      switch (action.type) {\n        case 'TODOS_RESET':\n          return state.set('value', null);\n\n      }\n      return state;\n    }\n    ```\n\n\n- **requestBuilder**\n\n    The requestBuilder is used by the default react-redux-fetch middleware. Takes a URL and request config and returns a Request object.\n    To replace the default implementation:\n    ```js\n    container.getDefinition('requestBuilder').replaceArgument('build', customRequestBuilder);\n    ```\n\n### buildActionsFromMappings\n\n```js\nimport { buildActionsFromMappings } from 'react-redux-fetch';\n```\n\nThe function internally used by `connect()`. You can use this function to create the fetch redux actions without a React Component.\n`buildActionsFromMappings(config)` accepts the same configuration options as `connect()`.\n\n```js\nconst actions = buildActionsFromMappings([{\n  resource: 'todos',\n  request: {\n    url: apiRoutes.getTodos(),\n  },\n}]);\n\nstore.dispatch(actions.todosGet());\n```\n\n## Examples\n\n### POST\n```jsx\nimport React, {PropTypes} from 'react';\nimport connect from 'react-redux-fetch';\n\nclass Playground extends React.Component {\n    static propTypes = {\n        // injected by parent\n        pokemonOnField: PropTypes.object.isRequired,\n        // injected by react-redux-fetch\n        dispatchPokemonPost: PropTypes.func.isRequired,\n        pokemonFetch: PropTypes.object\n    };\n\n    handleCatchPokemon = () => {\n        const {pokemonOnField, dispatchPokemonPost} = this.props;\n        dispatchPokemonPost(pokemonOnField.id, pokemonOnField.name, pokemonOnField.sprites.front_default);\n    };\n\n    render() {\n        const {pokemonOnField, pokemonFetch} = this.props;\n\n        return (\n            <div>\n                <h3>{pokemonOnField.name}</h3>\n                <img alt={pokemonOnField.name} src={pokemonOnField.sprites.front_default}/>\n                {!pokemonFetch &&\n                <button onClick={this.handleCatchPokemon}>catch!</button>\n                }\n            </div>\n        );\n    }\n}\n\n\nexport default connect([{\n    resource: 'pokemon',\n    method: 'post',\n    request: (id, name, image) => ({\n        url: '/api/pokemon/catch',\n        body: {\n            id,\n            name,\n            image\n        })\n}])(Playground);\n```\n\n### PUT\nAnalogous to POST\n\n### DELETE\n```jsx\nimport React, {PropTypes} from 'react';\nimport connect from 'react-redux-fetch';\n\nclass Pokemon extends React.Component {\n    static propTypes = {\n        // injected by parent\n        myPokemon: PropTypes.object.isRequired,\n        // injected by react-redux-fetch\n        dispatchPokemonDelete: PropTypes.func.isRequired\n    };\n\n    handleReleasePokemon = () => {\n        this.props.dispatchPokemonDelete(this.props.myPokemon.id);\n    };\n\n    render() {\n        const {myPokemon, dispatchPokemonDelete} = this.props;\n\n        return (\n            <div>\n                <h3>{myPokemon.name}</h3>\n                <img alt={myPokemon.name} src={myPokemon.image}/>\n                <button onClick={this.handleReleasePokemon}>catch!</button>\n            </div>\n        );\n    }\n}\n\n\nexport default connect([{\n    resource: 'pokemon',\n    method: 'delete',\n    request: (id) => ({\n        url: `/api/pokemon/${id}/release`,\n        meta: {\n            removeFromList: {\n                idName: 'id',\n                id: id\n            }\n        }\n}])(Pokemon);\n```\nA special property `removeFromList` can be specified in `meta`, which removes an element from the state if the resource value is a list.\n(In the example, the `pokemon` state contains a collection of Pokémon.)\n- `idName`: The id-key of the object to find and delete\n- `id`: The id-value of the object to find and delete\n\n## Code snippets\n\n[Code snippets](./docs/README.md)\n\n## Versioning\n\n[Semver](http://semver.org/) is followed as closely as possible. For updates and migration instructions, see the [changelog](https://github.com/hirviid/react-redux-fetch/wiki/Changelog).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hirviid/react-redux-fetch.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:flow",
    "build:flow": "flow-copy-source -v -i '{**/test/*.js,**/*.test.js}' src lib",
    "build:lib": "babel src --out-dir lib",
    "clean": "rimraf lib dist coverage",
    "fix": "eslint --fix src",
    "flow": "flow check src",
    "install:peers": "yarn add $(jq -r '.peerDependencies|keys|join(\" \")' package.json)",
    "lint": "eslint src test",
    "prepublish": "npm run clean && npm run lint && npm run build",
    "test": "mocha test/setup.js \"src/**/*.spec.js\" --reporter progress",
    "test:watch": "npm test -- --watch"
  },
  "types": "./react-redux-fetch.d.ts",
  "version": "0.11.3"
}
